declare global {
    interface Window {
      SpeechRecognition: any;
    }
  }
  
import { useState, useEffect } from "react";

type SpeechRecognitionHook = {
  isListening: boolean;
  transcript: string;
  isError: boolean;
  error: string;
  startListening: () => void;
  stopListening: () => void;
};

/**
 * Adds speech recognition to your application.
 *
 * @returns An object with the following properties:
 *   - `isListening`: A boolean indicating whether the recognition is currently listening for speech input.
 *   - `transcript`: A string containing the recognized speech input.
 *   - `isError`: A boolean indicating whether an error occurred during the recognition process.
 *   - `error`: A string containing any error s generated by the recognition process.
 *   - `startListening`: A function to start the recognition process.
 *   - `stopListening`: A function to stop the recognition process.
 * 
 * @remarks This hook cannot be used in server-side rendering (SSR) and the SpeechRecognition API may not be supported by all browsers.
 * 
 * @see {@link https://github.com/givensuman/reactutilities} for more information.
 */
const useSpeechRecognition = (): SpeechRecognitionHook => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [isError, setIsError] = useState(false);
  const [error, setError] = useState("");

  const recognition = new window.SpeechRecognition();

  recognition.continuous = true;

  useEffect(() => {
    recognition.onstart = () => {
      setIsListening(true);
      setTranscript("");
      setIsError(false);
      setError("");
    };

    recognition.onresult = (event: any) => {
      const result = event.results[event.resultIndex];
      if (result.isFinal) {
        setTranscript(result[0].transcript);
      }
    };

    recognition.onerror = (event: any) => {
      setIsError(true);
      setIsListening(false);
      setError(event.error);
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    return () => {
      recognition.stop();
    };
  }, []);

  const startListening = () => {
    try {
      recognition.start();
    } catch (err: any) {
      setIsError(true);
      setIsListening(false);
      setError(err.message);
    }
  };

  const stopListening = () => {
    recognition.stop();
  };

  return { isListening, transcript, isError, error, startListening, stopListening };
};

export default useSpeechRecognition;
